#ifndef Compound_h
#define Compound_h

#include <vector>
#include <tr1/array>
#include <tr1/memory>
#include <tr1/tuple>
#include "Manifold.h"
#include <Eigen/Core>
using Eigen::Vector3d;
using Eigen::Matrix3d;

class Compound {
	public:
		class Point;
		class PointOfReference;
		class Geodesic;
		typedef std::tr1::shared_ptr<Point> PointPtr;
		typedef std::tr1::shared_ptr<PointOfReference> PointOfReferencePtr;
		typedef std::tr1::shared_ptr<Geodesic> GeodesicPtr;
		typedef std::tr1::array<PointPtr,3> Triangle;
		class Point {
			public:
				Compound* getSpace();
				//Vector3d getVector();
				Point(Manifold::PointPtr position);
				Point();
				Manifold* getSubspace();
				Manifold::PointPtr getPosition();
				Vector3d getVector(Manifold* space);
			private:
				std::tr1::pair<bool,Vector3d> getVector(Manifold* space, int i);
				Manifold::PointPtr position;
				//Compound* space;
		};
		class PointOfReference {
			public:
				PointOfReference(std::tr1::shared_ptr<Manifold::PointOfReference> pointOfReference);
				Vector3d vectorFromPointAndNearVector(std::tr1::shared_ptr<Compound::Point> point, Vector3d vector);
				Vector3d vectorFromPointAndNearVector(std::tr1::shared_ptr<Compound::Point> point, Vector3d vector, int i);
				PointPtr pointFromVector(Vector3d vector);
				PointOfReferencePtr pointOfReferenceFromVector(Vector3d vector);
				Manifold::PointPtr getPosition();
				void rotate(Matrix3d rot);
				void move(Vector3d dir);
				PointPtr cylindrical(double r, double theta, double h);
				std::vector<Triangle> helix(double k);
				std::vector<Triangle> icosahedron();
				std::vector<Triangle> icosahedron(double k);
				std::vector<Triangle> octahedron();
				std::vector<Triangle> octahedron(double k);
			private:
				Manifold::GeodesicPtr getFinalGeodesic(Vector3d vector);
				Manifold::PointOfReferencePtr pointOfReference;
				PointPtr cylidrical(double r, double theta, double h);
		};
		GeodesicPtr getGeodesic(PointOfReferencePtr start, PointPtr end);
		GeodesicPtr getGeodesic(PointOfReferencePtr start, Vector3d vector);
};
#endif

